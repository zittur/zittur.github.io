{"posts":[{"title":"出海人怎么能不做个人博客网站呢？","text":"谁懂？！之前做了好几个网站，也买了几个域名，但都“无疾而终”。 作为一个正在出海做网站的航海家，怎么能不做一个个人博客呢？🤭 对我来说，博客也就是自嗨，爱怎么玩就怎么玩，开心就好！ 以前还想着搞个博客一定要发一些技术文档，天呐，那实在有点无聊，这次的博客是我的自留地，我想说什么就说什么！ 今天下午捣鼓了一阵子，把网名的域名买了：Hilooong，用了这个hexo的模板Icarus，绑定GitHub Pages，然后再解析DNS挂上域名，操作起来很顺手，体验很好。 部署出来的效果还是很符合我的审美的，先给他搞上线，以后再慢慢装修，丰富内容吧！ 一些工具本地工具 MarkText - Markdown 编辑器 本地使用的markdown编辑器是 MarkText，以前编辑markdown都是用Typora，虽然现在要收钱了，但是也不算贵，只不过我也没有买它的动力，开源的软件也都够用了。 Adobe Illustrator - AI 淘宝上买的，不好意思Adobe公司，我没有支持正版😭。 百度网盘链接🔗 百度网盘的会员是闲鱼上买的，一个月8.88，虽然…但是速度也很快啊，能省就省吧！ 在线网站 emojipedia - Emoji 网站 网址：https://emojipedia.org/ 文章中有时候贴一些Emoji的图标会用到，其实微信输入法就可以输入很多图标了，也够用了。 freepik - 设计素材 网址：https://www.freepik.com/ 可以找到很多的设计素材，比如logo、头像，以后装修博客肯定用得到。","link":"/2024/03/15/001-hello-blog/"},{"title":"建站要考虑的问题：用什么图床服务？","text":"我把这个问题丢给Kimi，得到的回到如下： IMG.TG: 特点：国内访问速度快，支持CDN，图片大小限制为5MB，存储容量不限，但每月限制500张上传。 适用性：适合需要快速访问和有一定上传频率的用户。 流浪图床: 特点：用户友好，支持多图上传，图片大小限制为5MB，存储容量不限。 适用性：适合对稳定性要求不高，且希望简单上传图片的用户。 聚合图床: 特点：提供全球CDN服务，图片大小限制为5MB，存储容量不限，但可能会有维护情况。 适用性：适合需要全球访问速度较快的用户。 PICUI: 特点：提供免费的公共图床服务，提供原图保护以及图片上传、外链等功能。 适用性：适合需要原图保护和外链服务的用户。 SM.MS: 特点：老牌图床网站，支持免费图片外链，稳定运行多年，无需注册，支持原图，支持HTTPS。 适用性：适合长期需要稳定外链服务的用户。 imageLOL 笑果图床: 特点：无需注册，支持HTTPS，最大限制单张图片5M，注册登录后可上传10M大小图片。 适用性：适合需要快速上传和分享图片的用户。 图壳: 特点：国内服务器托管，无需注册即可上传，网站上没有注明文件大小限制。 适用性：适合希望使用国内服务器加速的用户。 ImgURL: 特点：老牌免费图床服务，稳定性不错，无需注册，游客限制每日上传10张，单张图片不能超过5M。 适用性：适合日常图片上传需求不大的用户。 CatBox.moe: 特点：无需注册即可上传，支持200MB大小的主流格式文件外链，支持HTTPS。 适用性：适合需要上传大文件外链的用户。 牛图网 (niupic.com): 特点：老牌图床网站，免注册即可上传，最大支持16MB，支持HTTPS。 适用性：适合需要稳定图床服务的用户。 我看SM.MS不错嘛，就用这个了，实际上只有5GB的免费使用空间。 大不了换着用嘛… 穷鬼套装，能省就省🤣","link":"/2024/03/17/002-imgbed/"},{"title":"给这个博客网站写一个README！","text":"总览 以上就是我在建这个博客站的时候用到的工具&amp;网站。 部署一个网站可以说是非常方便快捷了，我写这个的目的是记录一些可能容易遗忘的点，这样下次再部署的时候就会更加得心应手！ 建站Hexo - 博客构建框架Hexo 是一个快速、简洁且高效的博客框架。 官网是：Hexo 模板可以在这里找到：Themes | Hexo 我当前使用的主题是 Icarus，地址是：GitHub - ppoffice/hexo-theme-icarus 说不定以后看不顺眼了，或者另有新欢了又会换一个主题 😆 Hexo 有一些最基本的命令，在文档里面扫一眼就知道了，很简单。 主要用到的几个命令是： 在一个空文件夹下初始化项目： 1hexo init 然后需要用 npm 来安装依赖： 1npm install 接着就是一些启动和部署的命令： 123hexo server（或者hexo s）hexo generate（或者hexo g）hexo deploy（或者hexo d） 几个要注意的地方： 1、关于npm install 在npm install的时候有可能会遇到一些问题，比如npm install hexo-deployer-git --save不成功，这时候可以试着把node_modules整个文件夹删掉，再重新npm install一次，防止之前可能使用 pnpm 来管理包导致的冲突。 2、关于hexo deploy hexo deploy的时候会把 public 文件夹下的代码推送到远程仓库，其他的代码还是在本地。 在hexo d的时候，可以加上 commit，比如hexo d -m &quot;first commit&quot;，和 git 的命令类似。 Github Pages用 github pages 来托管博客在 github 上新建一个开源（Public）的项目，注意项目的名字。 比如我的 GitHub 用户名是 zittur，那么我就创建一个 zittur.github.io 的代码库，这样 Github Pages 就能自动识别到了。 接下来需要做的就是配置博客项目的 _config.yml 文件： 1234deploy: type: git repo: git@github.com:zittur/zittur.github.io.git branch: main 配置好之后，再执行 hexo d 就可以将 public 下的代码推送到 GitHub 的 zittur.github.io 代码库的 main 分支上去了。 接着就是设置 github pages。 Settings 👉 Pages 👉 Github Pages 确定 Github Pages 打开了，然后将 Branch 设置成 main 分支，因为我们推上来的 public 的内容都在这个分支上。 设置 Custom domain，把我们买的域名填在这里，这个在后面讲到 namecheap 的 DNS 配置的时候再展开。 如果还没有设置自定义域名，那么这时候就可以访问 zittur.github.io 来直接访问博客了。 将源码也一并上传 Github以上只是将 hexo generate 的内容上传到 GitHub，使用 Github Pages 的功能部署了一个在线的网站，但是其他的代码还是在本地，如果需要在多个不同的端上操作，也可以把这些源码给 push 到 GitHub 上，方便多端同步。 GitHub 上新建一个私有仓库，空的仓库就行了。 在本地的博客文件夹中执行 git 相关的操作，比如，我在本地的博客路径 hilooong 下执行： 代码库初始化： 1git init 添加远程仓库： 1git remote add origin git@github.com:zittur/hilooong.git 设置主分支： 1git branch -M master 添加代码前检查一下.gitignore，就不把 node_modules/和 public/推到这个仓库去了： 1git add . 然后就是： 1git commit 推送到远程仓库： 1git push -u origin master 域名Namecheap 和 CloudFlare我的域名 hilooong.com 是在 namecheap 上买的，之前都是在狗爹那买的，但是总感觉体验不佳，这次试一下在 namecheap 上体验如何。 因为我使用了 CloudFlare，所以域名买好了之后要先配置 NameServer。 CloudFlare 的配置流程添加网站： Step1，选择免费模式： Step2，复制这两个 NameServer 的地址配置到 namecheap 上。 namecheap 的 nameservers 配置选择自定义 DNS（Custom DNS），也就是说让 CloudFlare 来配置 DNS，就不再 namecheap 这里配置了。 Step3，CF 中将下面这三个配置的开关都打开： 接着还需要在 CF 的 DNS 配置中解析 A 记录和 CNAME 记录。 因为我们使用的是 Github Pages 来部署的博客，也就是说，我们是希望通过访问域名 hilooong.com 之后，转到域名 zittur.github.io 上的。 那么，这几个记录的配置如下： 四个 A 记录是 github pages 的 IP。 1234185.199.111.153185.199.110.153185.199.109.153185.199.108.153 有一个点要注意，除了在这里需要配置 CNAME，还需要在博客根目录下添加一个名为 CNAME 的文件，文件内容就是域名，这样保证每次部署的时候都能和域名绑定在一起。 github pages 在设置 custom domain 的时候可能还需要验证域名归属，其实就是按要求在 DNS 里面配置一条 TXT 的记录即可。 至此，域名就算绑定成功了，可以愉快地使用域名来访问了。 Google Analysis 代码我们还可以在 GA 中添加数据流，这样还可以通过 GA 的控制台看到网站的访问情况。 Icarus 的主题配置文件提供了统计的配置： 123456plugins: # Google Analytics plugin settings # https://analytics.google.com google_analytics: # Google Analytics tracking ID tracking_id: XXXXXX tracking_id 在我们添加数据流之后可以获得，就是衡量 ID（measurement-id）。 添加之后部署成功，可以在 GA 验证一下是否成功。 本地代码编辑本地的代码编辑器使用的是 VSCode。 Markdown 编辑器用了开源的 MarkText，暂时体验还不错，就是在添加图片的时候不是很方便。 AI 辅助devv.ai 很好用，因为喂了很多技术文档，所以遇到问题问他一般都能解决。 kimi 也很好用。 chatgpt 也好用，虽然花了钱买 gpt4，但是用起来真心疼啊，反而用得少了。","link":"/2024/03/18/003-add-readme/"},{"title":"学点前端吧！","text":"作为一个后端开发，前几年接触的完全都是后端的技术栈，对于前端了解甚微。之前做的一个在线的计算网站，使用的就是最基本的js+css+html三件套，朴素至极。对于前端框架Vue、React等等也是停留在知道名字上。 最近做网站了解到目前流行的技术栈，比如Tailwind，typescript，nextjs等等，上手试了一下确实很方便，但是苦于没有这方面的经验，除了部署和简单的修改，其他的几乎不了解，平时混迹的几个群有些大佬会分享一些学习资料，不如就列出来以备后续学习之用。 官方文档 TailwindCss Youtube 教程 赛博菩萨 Antonio Code With Antonio - YouTube 学习教程 Antonio的在线学习网站：Code With Antonio Refactoring-ui-v102pdf-3-pdf-free leves大佬的书：Make Tools Online TailSpark - 350+ Free TailwindCSS Components &amp; Templates https://tailspark.co/ Figma: The Collaborative Interface Design Tool https://www.figma.com/ 牛人的开源代码","link":"/2024/03/18/004-learn-frontend/"},{"title":"赛博菩萨Antonia的免费课程","text":"赛博菩萨Antonio在Youtube上分享了很多他自己做的项目，还为此开发了一个网站：CodewithAntonio，每一个项目教程都以章节的形式呈现，学起来成就感满满！！ 下面是目前已有的课程： 学习中 Duolingo Clone 计划学习 A Real-Time Miro Clone Twitch Clone Trello Clone Fullstack Notion Clone An LMS Platform Fullstack Discord Clone A SaaS: AI Companion A SaaS AI Platform Full Stack E-Commerce + Dashboard &amp; CMS Full Stack Spotify Clone Real-Time Messenger Clone Full Stack Airbnb Clone Full Stack Twitter Clone Full Stack Netflix Clone 感谢大佬！","link":"/2024/03/19/005-antonio-tutorial/"},{"title":"宁可错误乐观，也不正确悲观","text":"这几天晚上睡得都很晚，要命的是，早上还得起得很早！！ 住的地方距离上班地得公交🚌转地铁🚇，最快也要半小时，中午因为没有设闹钟，一觉醒来都已经两点十五了，匆匆忙忙打了个车去上班，最后还是迟到了十五分钟。 又偏偏是在我迟到的这个中午，我错过了领导给我打的电话和微信消息（因为回来直接睡了，连手机也没看，而且手机静音，微信电话也没接到）。下午领导打电话问我到了没有，我说还有十分钟，他显得很惊讶，我也有点无语🙄。 虽然这样给人感觉挺不靠谱的，但是我脸皮也挺厚的，也就稍微觉得有一点内疚，然后还是该干嘛就干嘛吧。 最近把很多时间和精力都投入到出海做独立站上面了，每天都在不断长脑子和涨知识，真的感觉自己以前虽然作为一个程序员，但是没多少程序员的基本素养，海外的新东西都没怎么关注，都在闭门造车，被工作给限制住了，而且工作之后更没有时间精力来做一些自己喜欢的事情。 换了一个工作后，时间充裕了很多，在这个工作转换的期间，我也扎扎实实玩了好几个月，那可是从未体会过的放松和自在啊！ 三月份开始之后，决定踏入独立开发这条路，注定就是和过去几个月那种半躺平的状态说再见了，踏踏实实，脚踏实地去做些事情，去创造一些价值，去实现一些有趣有用的东西，然后在这片大海中捞到一些“鱼”。从长远来说，目标是很吸引人的，也是值得去不断努力靠近的，走在这条路上也是让人充满希望的，这是我很向往的一种状态。 目前把独立开发作为一项副业来做，首先在心态上可以稳住，这是一条可以长期做的事，不急于一时；另外就是要不断学习，不断接触新东西，本来程序员就是一个终身学习的职业，甚至每一个行业都应该终身学习。 Elon Musk说：我宁可错误乐观，也不要正确悲观I’d rather be optimistic and wrong, Than pessimistic and right如果我们把目光尺度放得更长远，有什么好悲观的呢，人都会Game Over，不如开开心心过每一天，纠结这纠结那干嘛呢，想要赚钱就专心去搞钱，把自己专注成一道激光。 共勉！–2024年03月21日 23:17:22","link":"/2024/03/21/006-be-optimistic/"},{"title":"做最真实的自己","text":"最近有一个感悟，我觉得周遭的社会氛围一直在把人往一个很狭窄逼仄的空间中挤压，我们总是在被迫地做一些事情，而不是遵从内心，去切实体验自己的生活，去体会和感受。 为什么不放下那么多条条框框，做一个真实的自己呢？ 这个社会太缺少真诚的人了，真诚成了一种稀缺的品质。为什么我们也要学着压抑自己，不表现出自己真实的一面呢？因为有所顾忌。害怕出丑、害怕别人另眼相看、害怕别人的评价等等，而这些种种，是否只是你自己内心的映像呢？ 你觉得你出丑了，其实是你内心认为自己在做傻事，别人在笑话你；你觉得别人对你指指点点了，其实是你内心担心别人这样评价你。 如果这些都只是你内心对外部世界的倒影，如果你能成为一个观察者，把自己抽离出这个环境，还会被困扰吗？ 所以说：去做自己想做的事吧！热烈地去表达自己想要表达的东西！卸去那些不必要的伪装和面具，过得舒畅难道不好吗？！ 这也是我做这个博客的原因之一，我只表达我最真实的感受，毫不担心谁看到之后会评头论足，如果真有这样的人，那我倒是想问：”这TMD与你何干？” 最近我确实在绝大多数时候都表达了真实的自己，以前在社交场合拘谨的情况，现在反而觉得自己在往社牛的方向发展，挺有意思的。 为更好的自己干杯🍻！","link":"/2024/03/25/007-be-yourself/"},{"title":"重新开启博客","text":"很久没有打开这个博客网站了，之前买的域名现在都已经忘记是在哪里买的，还剩多久有效期了。 现在要紧的事情是把每天的感想记录下来。 2025 年 02 月 22 日 21:54:41 更新 看了一下，三月就要到期了，还是续个费吧，才 100 多一点，折合一天才几毛钱，冲了！","link":"/2024/12/21/009-reopen-my-blog/"},{"title":"我的短板","text":"这两天确实又开始胡思乱想了，估计是因为没有控制好自己又熬夜了，精神萎靡，就容易往不好的方向去想。 我觉得自己短板还是很多的，在做出海产品的整个链路上缺乏经验，执行力是有的，但也不是很足，正反馈来的慢容易让人懈怠，需要不断激励自己，一方面是从外界的激励，看到拿到结果的人分享的成果，另一方面是自己内在的动力，对于目标达成的渴望，渴望是很强烈的，但是自身存在的短板确实也无法忽视： 就拿技术来说，缺乏对前端的了解，操作非常局限，经常听人说忘掉技术，可能更快成功，但是是否有一个前提是，对于技术已经有一定的基础，所谓“忘掉技术”，其实是说不要去钻技术实现的牛角尖，不要把过多的时间精力放在技术上，对于需求的挖掘、产品上线之后的推广运营对于技术人来说会更重要。我想这是对那些有技术基础的人说的话，对于我自己目前的水平可能不适用。磨刀不误砍柴工，从提高效率的角度上讲，我还是需要先把自己的基础给打牢。 这是一个持久战，想要到达彼岸本来就是一个漫长且充满不确定的过程，也就是这样的过程才具有无穷的挑战性，才有趣！","link":"/2024/03/26/008-my-shortcomings/"},{"title":"使用 uv 来管理 Python 之 uv 使用配置教程","text":"我发现使用 uv 来管理 Python 的版本很方便，且下载依赖之类的操作也很快，整理下面这份详细的 uv 使用配置教程，适合作为以后新建 Python 项目时的参考文档。 1. uv 简介 uv 是一款用 Rust 编写的极快速 Python 包管理器和项目管理工具，目标是成为“Python 的 Cargo”。官网: https://docs.astral.sh/uv/ 它能够替代传统的 pip、pip-tools 和 virtualenv 命令，并且在安装、解析依赖和创建虚拟环境等方面有着显著的性能优势，如上图（比 pip 快 10 ～ 100 倍）。此外，uv 还提供了全局缓存机制，既节省磁盘空间，也加速了后续操作。 2. 安装 uv在 macOS 上安装 uv 非常简单，有多种方式可供选择： 2.1 使用 Homebrew 安装如果已经安装了 Homebrew，可以直接执行： 1brew install uv 2.2 使用官方安装脚本通过 curl 下载并执行安装脚本： 1curl -LsSf https://astral.sh/uv/install.sh | sh 2.3 通过 pip 安装如果更习惯 pip，也可以： 1pip install uv 2.4 手动安装我一开始使用的是 1curl -LsSf https://astral.sh/uv/install.sh | sh 来安装的，但是下载失败了，不能忍，我直接到 uv 的 github 仓库的 release 中下载对应版本：https://github.com/astral-sh/uv/releases 因为我还在用 Intel 芯片的 Mac，所以我下载的是：uv-x86_64-apple-darwin.tar.gz 下载完成之后，解压，在 uv 的可执行文件路径下执行： 1./uv --version 好家伙，网上下载的不让打开：Apple 无法验证“uv”是否包含可能危害 Mac 安全或泄漏隐私的恶意软件。 直接运行以下命令移除文件的隔离属性： 1xattr -d com.apple.quarantine uv 然后把 uv 移动到系统 PATH 中 1sudo mv uv /usr/local/bin/uv 安装完成后，可以通过以下命令检查 uv 是否安装成功： 1uv -h 或者 uv --version 3. 初始化项目uv 提供了类似于其他现代包管理器的项目初始化命令，可以快速为的 Python 项目生成基础结构。 3.1 创建新项目进入希望创建项目的目录，执行： 1uv init myproject 此命令会在 myproject 目录下生成如下文件： pyproject.toml：项目的基本元数据（名称、版本、描述、支持的 Python 版本等）。 uv.lock：自动生成的锁文件，用于记录所有依赖的具体版本。 其他示例文件（如 hello.py 和 README.md），可以根据需要修改或删除。 3.2 查看生成的文件进入项目目录后，可以使用 ls 命令查看项目结构： 12cd myprojectls 将看到类似下面的输出： 1234567.venv.gitignore.python-versionhello.pypyproject.tomlREADME.mduv.lock 4. 虚拟环境管理uv 内置了虚拟环境管理功能，让可以轻松创建、切换和管理项目的虚拟环境。 4.1 创建虚拟环境在项目根目录下，执行： 1uv venv uv 会自动检测当前项目所需的 Python 版本（依据 pyproject.toml 中的 requires-python），并在项目目录下创建一个名为 .venv 的虚拟环境。 4.2 指定 Python 版本如果需要使用特定版本的 Python，可以使用 --python 参数： 1uv venv --python /usr/local/bin/python3.8 这样会基于指定的 Python 解释器创建虚拟环境。 也可以使用下面的命令来创建指定版本的虚拟环境： 1uv venv --python 3.11 4.3 激活虚拟环境激活虚拟环境（macOS 或 Linux）： 1source .venv/bin/activate 完成后，命令行前缀会显示虚拟环境名称，表示当前已经进入该环境。 5. 依赖管理uv 提供了简单直观的命令来添加、更新和删除依赖。 5.1 添加依赖添加依赖与 npm 或 Cargo 类似，直接执行： 1uv add pandas 此命令会： 解析并下载 pandas 及其依赖包； 更新 pyproject.toml 中的依赖声明； 将详细依赖信息写入 uv.lock。 5.2 删除依赖如果不再需要某个包，可以执行： 1uv remove pandas uv 会自动卸载 pandas 及其不再需要的依赖，同时更新锁文件。 5.3 更新依赖如果需要升级某个依赖到最新版本，可使用： 1uv add --upgrade requests 这会更新 requests 包及其版本号，并同步到虚拟环境中。 6. 区分开发与生产环境依赖uv 支持将依赖分组管理，以便区分开发（dev）和生产（production）环境的依赖。 6.1 添加分组依赖例如，将 pandas 添加为开发依赖： 1uv add --group dev pandas 将 requests 添加为生产依赖： 1uv add --group production requests 6.2 查看 pyproject.toml执行上述命令后，的 pyproject.toml 会自动生成类似下面的结构： 1234567891011121314[project]name = &quot;myproject&quot;version = &quot;0.1.0&quot;description = &quot;Add your description here&quot;requires-python = &quot;&gt;=3.12&quot;dependencies = [][dependency-groups]dev = [ &quot;pandas&gt;=2.2.3&quot;,]production = [ &quot;requests&gt;=2.32.3&quot;,] 这样可以方便在不同场景下安装相应的依赖。 7. 运行项目和脚本uv 除了管理依赖，还集成了运行命令，让无需离开 uv 的管理体系即可运行代码。 7.1 运行项目中的脚本假设 hello.py 内容如下： 12345def main(): print(&quot;Hello from myproject!&quot;)if __name__ == &quot;__main__&quot;: main() 使用 uv 运行： 1uv run hello.py 7.2 使用 uv 运行带依赖的脚本如果脚本中引用了已安装的依赖（如 pandas），确保依赖已添加，然后运行： 1uv run hello.py uv 会自动在项目的虚拟环境中执行代码。 8. 高级功能除了基本的项目初始化、虚拟环境和依赖管理外，uv 还支持以下高级功能： 8.1 脚本依赖管理如果有单文件脚本，并希望为该脚本单独添加依赖，可以执行： 1uv add --script example.py requests 此命令会在脚本内嵌入依赖声明，然后在隔离环境中运行脚本时自动安装相应依赖。 8.2 多版本 Python 管理uv 可以管理多个 Python 版本，帮助快速切换或安装不同版本的 Python： 1uv python install 3.10 3.11 3.12 安装完成后，可以通过： 1uv python pin 3.11 将项目固定使用某个 Python 版本。 9 其他我在尝试安装 browser-use webui 的时候涉及到 uv 的使用，以下是项目地址：browser-use webui","link":"/2025/02/22/010-use-uv/"},{"title":"博客主题美化","text":"一些有用的博客美化教程： imaegoo关于主题美化的博客","link":"/2025/02/22/011-awesome-effect/"},{"title":"重新使用 Typora 来写 Markdown 笔记","text":"为什么使用 Typora其实自己在几年前做笔记管理的时候就一直使用 Markdown，那时候 Typora 还是免费的。 我觉得 Typora 最好的地方是实时预览和快捷键，尤其是快捷键。 比如我想要插入一个一级标题，不需要去输入#1 之类的，而是直接使用 cmd+1 即可，如果需要输入一个图片链接，不要去想怎么用 Markdown 的语法写，复制图片链接直接粘贴进来就行了。 其他一些常用的比如加粗，这个和日常使用加粗的逻辑都是一样的：cmd+b，会自动添加 Markdown 格式的**。 一些常见的快捷键标题的快捷键：cmd+数字 代码的快捷键：ctrl+` 代码块：alt+shift+k 如果复制的是一个代码块，也会自动识别，很不错。","link":"/2025/02/22/012-typora-use/"}],"tags":[{"name":"个人博客","slug":"个人博客","link":"/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"name":"工具","slug":"工具","link":"/tags/%E5%B7%A5%E5%85%B7/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"},{"name":"Antonio","slug":"Antonio","link":"/tags/Antonio/"},{"name":"胡思乱想","slug":"胡思乱想","link":"/tags/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"},{"name":"美化","slug":"美化","link":"/tags/%E7%BE%8E%E5%8C%96/"},{"name":"Typora","slug":"Typora","link":"/tags/Typora/"}],"categories":[{"name":"建站","slug":"建站","link":"/categories/%E5%BB%BA%E7%AB%99/"},{"name":"教程","slug":"教程","link":"/categories/%E6%95%99%E7%A8%8B/"},{"name":"随感","slug":"随感","link":"/categories/%E9%9A%8F%E6%84%9F/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"博客","slug":"博客","link":"/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"App","slug":"App","link":"/categories/App/"}],"pages":[{"title":"about","text":"关于我后端开发，出海航行扬帆启航中🚢 探索自由职业，为财务自由努力中💰 All in AI，加速成为十倍速全流程工程师💻","link":"/about/index.html"}]}